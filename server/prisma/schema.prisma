datasource db {
    provider = "sqlite"
    url = "file:./db.sqlite"
}

// This model represents a JWT.
// The id is generated by us and added as a claim in the jwt itself (jti).
// The jwt field of this model is actually an encrypted base64 string of the JWT (safety!).
// Even thought the jwt will have the expiration date in its claims (exp), it never hurts to store
// it here as well. 
model Token {
    id        String @id @unique
    jwt       String
    expiresAt DateTime 

    accounts  Account[]
}

model VerificationCode {
    email     String @id @unique
    code      String
    expiresAt DateTime

    accounts  Account[]
}

// Account info we keep private.
// This account is also generated when the user first requests /auth/login
// with just their email.
// We then generate the verification code and if correct
// we generate the user and token.
model Account {
    id               String           @id @default(cuid())

    verificationEmail String?          @unique
    verificationCode  VerificationCode? @relation(fields: [verificationEmail], references: [email], onUpdate: Cascade)

    tokenId          String?          @unique
    token            Token?           @relation(fields: [tokenId], references: [id], onUpdate: Cascade)

    userId           String?          @unique
    user             User?            @relation(fields: [userId], references: [id], onUpdate: Cascade)
}

// User we send to the client
model User {
    id       String @id     @default(cuid())
    email    String @unique

    // Here we add all public facing information about a user

    accounts Account[]
}

generator client {
    provider = "prisma-client-js"
}